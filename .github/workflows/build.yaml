name: Build
on:
  pull_request:
    branches:
      - main
      - develop
  push:
    branches:
      - main
      - develop
jobs:
  build:
    name: Build & Test Service with Java 17
    runs-on: ubuntu-latest
    steps:
      - id: checkout
        name: Checkout
        uses: actions/checkout@v3

      - id: jdk
        name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - id: build
        name: Build
        run: ./mvnw -B clean package -DskipTests -ff

      - id: test
        name: Test
        run: ./mvnw -B verify

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          junit_files: target/surefire-reports/*.xml

      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v3
        with:
          name: jacoco-report
          path: target/site/jacoco/

      - id: jacoco
        name: Add coverage to PR
        uses: madrapps/jacoco-report@v1.6.1
        if: ${{ github.event_name == 'pull_request' }}
        with:
          paths: ${{ github.workspace }}/target/site/jacoco/jacoco.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 80
          min-coverage-changed-files: 60
          title: Code Coverage
          continue-on-error: false
          update-comment: true

      - id: publish
        name: Publish Artifact
        uses: actions/upload-artifact@master
        with:
          name: product-artifact
          path: ./target/*.jar
  push:
    permissions:
      contents: 'read'
      id-token: 'write'
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: build
    #if: ${{ false }}  # disable for now
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') && github.event_name == 'push'
    steps:
      - id: checkout
        name: Checkout Repository
        uses: actions/checkout@v3
      - id: artifact
        name: Download Artifact
        uses: actions/download-artifact@master
        with:
          name: product-artifact
          path: ./target
      - id: authenticate-gcp
        name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          token_format: access_token
          workload_identity_provider: ${{ secrets.GCP_WL_IDP }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          access_token_lifetime: 300s
      - id: login
        name: Login to Artifact Registry
        uses: docker/login-action@v3
        with:
          registry: us-east1-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.authenticate-gcp.outputs.access_token }}

      - name: Get tag
        id: get-tag
        run: echo "short_ref=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - id: docker-push-tagged
        uses: docker/build-push-action@v2
        name: Tag Docker image and push to Google Artifact Registry
        with:
          context: .
          push: true
          tags: |
              us-east1-docker.pkg.dev/hurban-lab/store/product:${{ steps.get-tag.outputs.short_ref }}
              us-east1-docker.pkg.dev/hurban-lab/store/product:latest
  deploy:
    permissions:
      contents: 'read'
      id-token: 'write'
    name: Deploy and Restart service
    runs-on: ubuntu-latest
    needs: push
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') && github.event_name == 'push'
    steps:
      - id: authenticate-gcp
        name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACC }}
      - id: get-credentials-develop
        if: (github.ref == 'refs/heads/develop')
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ secrets.GCP_CLUSTER_DEVELOP }}
          location: ${{ secrets.GCP_REGION_GLOBAL }}
      - id: get-credentials-prod
        if: (github.ref == 'refs/heads/main')
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ secrets.GCP_CLUSTER_MAIN }}
          location: ${{ secrets.GCP_REGION_GLOBAL }}
      - id: catalog-deploy-sandbox
        if: (github.ref == 'refs/heads/develop')
        name: Deploy Service to Sandbox
        run: kubectl rollout restart deployment product-deploy --namespace=${{ secrets.GCP_NAMESPACE_DEVELOP }}
      - id: catalog-deploy-prod
        if: (github.ref == 'refs/heads/main')
        name: Deploy Service to Production
        run: kubectl rollout restart deployment product-deploy --namespace=${{ secrets.GCP_NAMESPACE_MAIN }}